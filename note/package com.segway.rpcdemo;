package com.segway.rpcdemo;

public interface IPlay extends android.os.IInterface{

	public static abstract class Stub extends android.os.Binder implements com.segway.rpcdemo.IPlay{
		private static final java.lang.String DESCRIPTOR = "com.segway.rpcdemo.IPlay";
		
		public Stub(){
			this.attachInterface(this, DESCRIPTOR);
		}

		public static com.segway.rpcdemo.IPlay asInterface(android.os.IBinder obj){
			if ((obj==null)) {
				return null;
			}

			android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
			
			if (((iin!=null)&&(iin instanceof com.segway.rpcdemo.IPlay))) {
				return ((com.segway.rpcdemo.IPlay)iin);
			}
			return new com.segway.rpcdemo.IPlay.Stub.Proxy(obj);
		}

		@Override public android.os.IBinder asBinder(){
			return this;
		}

		@Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException{
			switch (code){
				case INTERFACE_TRANSACTION:{
					reply.writeString(DESCRIPTOR);
					return true;
				}
				case TRANSACTION_setName:{
					data.enforceInterface(DESCRIPTOR);
					java.lang.String _arg0;
					_arg0 = data.readString();
					this.setName(_arg0);
					reply.writeNoException();
					return true;
				}
				case TRANSACTION_addFile:{
					data.enforceInterface(DESCRIPTOR);
					java.lang.String _arg0;
					_arg0 = data.readString();
					this.addFile(_arg0);
					reply.writeNoException();
					return true;
				}
				case TRANSACTION_ToString:{
					data.enforceInterface(DESCRIPTOR);
					java.lang.String _result = this.ToString();
					reply.writeNoException();
					reply.writeString(_result);
					return true;
				}
			}
			return super.onTransact(code, data, reply, flags);
		}

		private static class Proxy implements com.segway.rpcdemo.IPlay{
			private android.os.IBinder mRemote;

			Proxy(android.os.IBinder remote){
				mRemote = remote;
			}

			@Override public android.os.IBinder asBinder(){
				return mRemote;
			}

			public java.lang.String getInterfaceDescriptor(){
				return DESCRIPTOR;
			}

			@Override public void setName(java.lang.String name) throws android.os.RemoteException{
				android.os.Parcel _data = android.os.Parcel.obtain();
				android.os.Parcel _reply = android.os.Parcel.obtain();
				try {
				_data.writeInterfaceToken(DESCRIPTOR);
				_data.writeString(name);
				mRemote.transact(Stub.TRANSACTION_setName, _data, _reply, 0);
				_reply.readException();
				} finally {
				_reply.recycle();
				_data.recycle();
				}
			}

			@Override public void addFile(java.lang.String f_name) throws android.os.RemoteException{
				android.os.Parcel _data = android.os.Parcel.obtain();
				android.os.Parcel _reply = android.os.Parcel.obtain();
				try {
					_data.writeInterfaceToken(DESCRIPTOR);
					_data.writeString(f_name);
					mRemote.transact(Stub.TRANSACTION_addFile, _data, _reply, 0);
					_reply.readException();
				} finally {
					_reply.recycle();
					_data.recycle();
				}
			}

			@Override public java.lang.String ToString() throws android.os.RemoteException{
				android.os.Parcel _data = android.os.Parcel.obtain();
				android.os.Parcel _reply = android.os.Parcel.obtain();
				java.lang.String _result;
				try {
				_data.writeInterfaceToken(DESCRIPTOR);
				mRemote.transact(Stub.TRANSACTION_ToString, _data, _reply, 0);
				_reply.readException();
				_result = _reply.readString();
				} finally {
					_reply.recycle();
					_data.recycle();
				}
				return _result;
			}
		}

		static final int TRANSACTION_setName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);
		static final int TRANSACTION_addFile = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);
		static final int TRANSACTION_ToString = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);
	}
	
	public void setName(java.lang.String name) throws android.os.RemoteException;
	public void addFile(java.lang.String f_name) throws android.os.RemoteException;
	public java.lang.String ToString() throws android.os.RemoteException;
}
